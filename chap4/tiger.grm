%{

#include <stdio.h>
#include "util.h"
#include "errormsg.h"
#include "absyn.h"

A_exp absyn_root;

int yylex(void); /* function prototype */

void yyerror(char *s)
{
 EM_error(EM_tokPos, "%s", s);
}

%}

/* */
/* union used for the variable $$, $1, $2, $3, ... */
/* */
%union {
	int pos;
	int ival;
	string sval;
    A_dec a_dec;
    A_exp a_exp;
    A_expList a_explist;
    A_var a_var;
	}

/* */
/* Define which rule uses which field of the union */
/* */
%type <a_dec> dec
%type <a_dec> vardec

%type <a_exp> exp
%type <a_exp> lvalue
%type <a_exp> nil
%type <a_exp> arithmetic
%type <a_exp> comparison
%type <a_exp> boolean_operators
%type <a_exp> if_then_else
%type <a_exp> if_then
%type <a_exp> while
%type <a_exp> assignment
%type <a_exp> for
%type <a_exp> no_value

%type <a_explist> sequencing
%type <a_explist> expseq

/* */
/* the list of all token */
/* */
%token <sval> ID STRING
%token <ival> INT
%token 
  COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK 
  LBRACE RBRACE DOT 
  PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE
  AND OR ASSIGN
  ARRAY IF THEN ELSE WHILE FOR TO DO LET IN END OF 
  BREAK NIL
  FUNCTION VAR TYPE 

/* */
/* operator precedence */
/* */

/* https://www-h.eng.cam.ac.uk/help/tpl/languages/flexbison/ *
/* Define operator reduction to get rid of shift/reduce conflicts 
%left PLUS MINUS
%left TIMES DIVIDE

%left EQ 
%left NEQ 
%left LT 
%left LE 
%left GT 
%left GE
*/

/* stolen from https://github.com/FlexW/tiger-compiler/blob/master/src/tiger_grm.y */
%nonassoc DO OF
%nonassoc THEN /* ELSE must come after THEN! */
%nonassoc ELSE
%left SEMICOLON
%left ASSIGN
%left OR
%left AND
%nonassoc EQ NEQ GT LT GE LE
%left PLUS MINUS
%left TIMES DIVIDE
%left UMINUS

/* define the start symbol */
%start program

%%

// Tiger programs do not have arguments: a program is just an expression exp.
program : exp { printf("program - exp\n"); absyn_root = $1; }
        ;

exp : lvalue { printf("exp - lvalue\n"); $$ = $1; printf("exp - lvalue kind: %d\n", $$->kind); }
//  | valueless_expression
    | nil { $$ = $1; }
    | sequencing { printf("exp - sequencing\n"); $$ = $1; }
    | no_value { $$ = $1; }
    | INT { $$ = A_IntExp(0, $1); }
    | STRING { $$ = A_StringExp(0, $1); }
//  | negation
    | function_call
    | arithmetic { $$ = $1; }
    | comparison { $$ = $1; }
//  | string_comparison
    | boolean_operators { $$ = $1; }
//  | precedence_of_operators
//  | associativity_of_operators
    | record_creation
    | array_creation
//  | array_and_record_assignment
//  | extent
    | assignment { $$ = $1; }
    | if_then_else { $$ = $1; }
    | if_then { $$ = $1; }
    | while { $$ = $1; }
    | for { $$ = $1; }
    | break
    | let
//    | parenthesis
    ;

lvalue : ID { 
            printf("lvalue - ID\n"); 
            $$ = A_VarExp(0, A_SimpleVar(0, S_Symbol($1)));
            printf("lvalue - ID kind: %d\n", $$->kind);
            } // variable
       | lvalue DOT ID { printf("lvalue - DOT ID\n"); } // record field
       | lvalue array_indexing { printf("lvalue - array_indexing\n"); } // array subscript
       ;

nil : NIL { $$ = A_NilExp(0); }
    ;

sequencing : LPAREN expseq RPAREN { printf("sequencing 1\n"); $$ = A_SeqExp(0, $2); }
           ;

no_value : LPAREN RPAREN { printf("no_value\n"); $$ = A_NilExp(0); }
         ;

function_call : ID LPAREN RPAREN
              | ID LPAREN expseq_comma RPAREN
              ;

arithmetic : exp PLUS exp { $$ = A_OpExp(0, A_plusOp, $1, $3); }
           | exp MINUS exp { $$ = A_OpExp(0, A_minusOp, $1, $3); }
           | exp TIMES exp { $$ = A_OpExp(0, A_timesOp, $1, $3); }
           | exp DIVIDE exp { $$ = A_OpExp(0, A_divideOp, $1, $3); }
           | MINUS exp %prec UMINUS
           ;

comparison : exp EQ exp { $$ = A_OpExp(0, A_eqOp, $1, $3); }
           | exp NEQ exp { $$ = A_OpExp(0, A_neqOp, $1, $3); }
           | exp LT exp { $$ = A_OpExp(0, A_ltOp, $1, $3); }
           | exp LE exp { $$ = A_OpExp(0, A_leOp, $1, $3); }
           | exp GT exp { $$ = A_OpExp(0, A_gtOp, $1, $3); }
           | exp GE exp { $$ = A_OpExp(0, A_geOp, $1, $3); }
           ;

boolean_operators : exp AND exp { $$ = A_OpExp(0, A_andOp, $1, $3); }
                  | exp OR exp { $$ = A_OpExp(0, A_orOp, $1, $3); }
                  ;

record_creation : ID LBRACE record_creation_assignments RBRACE
                ;

record_creation_assignments : %empty
                            | record_creation_assignment
                            | record_creation_assignments COMMA record_creation_assignment
                            ;

record_creation_assignment : ID EQ exp
                           ;

array_creation : lvalue OF exp
               ;

array_indexing : LBRACK exp RBRACK
               ;

assignment : lvalue ASSIGN exp 
             { 
                //$$ = A_AssignExp(0, A_SimpleVar(0, ((A_exp *)$1)), $3);
                //$$ = A_AssignExp(0, A_SimpleVar(0, $1), $3);
                //$$ = A_AssignExp(0, $1, $3);
                $$ = A_AssignExp(0, $1->u.var, $3);
             }
           ;

if_then_else : IF exp THEN exp ELSE exp { $$ = A_IfExp(0, $2, $4, $6); }
             ;

if_then : IF exp THEN exp { $$ = A_IfExp(0, $2, $4, NULL); }
        ;

while : WHILE exp DO exp { $$ = A_WhileExp(0, $2, $4); }
      ;

for : FOR assignment TO exp DO exp 
    { 
        // A_exp A_ForExp(A_pos pos, S_symbol var, A_exp lo, A_exp hi, A_exp body)
        //$$ = A_ForExp(0, A_SimpleVar(0, S_Symbol($2->u.assign.var)), $2->u.assign.exp, $4, $6); 
        $$ = A_ForExp(0, S_Symbol($2->u.assign.var), $2->u.assign.exp, $4, $6);
    }
    ;

break : BREAK
      ;

let : LET decs IN expseq END
    ;

// A declaration-sequence is a sequence of type, value, and function declarations; 
// no punctuation separates or terminates individual declarations.
decs : dec
     | decs dec
     ;

dec : tydec 
    | vardec { $$ = $1; }
    | fundec
    ;

tydec : TYPE ID EQ ty
      ;

ty : ID
   | LBRACE tyfields RBRACE
   | ARRAY OF ID
   ;

tyfields : %empty
         | tyfield
         | tyfields COMMA tyfield
         ;

tyfield : ID COLON ID
        ;

expseq : 
       exp { printf("expseq 2\n"); $$ = A_ExpList($1, NULL); }
       | 
       exp SEMICOLON expseq { printf("expseq 3\n"); $$ = A_ExpList($1, $3); }
       ;

expseq_comma : exp
             | expseq_comma COMMA exp
             ;

vardec : VAR ID ASSIGN exp { $$ = A_VarDec(0, $2, $2, NULL); }
       | VAR ID COLON ID ASSIGN exp { $$ = A_VarDec(0, $2, $2, $4); }
       ;

fundec : FUNCTION ID LPAREN tyfields RPAREN EQ exp
       | FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp
       ;
