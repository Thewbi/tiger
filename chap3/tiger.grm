%{
#include <stdio.h>
#include "util.h"
#include "errormsg.h"

int yylex(void); /* function prototype */

void yyerror(char *s)
{
 EM_error(EM_tokPos, "%s", s);
}
%}


%union {
	int pos;
	int ival;
	string sval;
	}

%token <sval> ID STRING
%token <ival> INT

%token 
  COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK 
  LBRACE RBRACE DOT 
  PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE
  AND OR ASSIGN
  ARRAY IF THEN ELSE WHILE FOR TO DO LET IN END OF 
  BREAK NIL
  FUNCTION VAR TYPE 

/* https://www-h.eng.cam.ac.uk/help/tpl/languages/flexbison/ *
/* Define operator reduction to get rid of shift/reduce conflicts 
%left PLUS MINUS
%left TIMES DIVIDE

%left EQ 
%left NEQ 
%left LT 
%left LE 
%left GT 
%left GE*/

%nonassoc DO OF
%nonassoc THEN /* ELSE must come after THEN! */
%nonassoc ELSE
%left SEMICOLON
%left ASSIGN
%left OR
%left AND
%nonassoc EQ NEQ GT LT GE LE
%left PLUS MINUS
%left TIMES DIVIDE
%left UMINUS

/* define the start symbol */
%start program

%%

// Tiger programs do not have arguments: a program is just an expression exp.
program: exp
      // | stmt
       ;
/*
stmt : if_then_else
     | array_creation
     | assignment
     ;
    */

exp: lvalue
// | valueless_expression
   | nil
// | sequencing
// | no_value
   | INT // integer_literal
   | STRING // string_literal
// | negation
   | function_call
   | arithmetic
   | comparison
// | string_comparison
// | boolean_operators
// | precedence_of_operators
// | associativity_of_operators
   | record_creation
   | array_creation
// | array_and_record_assignment
// | extent
   | assignment
   | if_then_else
// | if_then
// | while
// | for
// | break
   | let
// | parenthesis   
   ;

lvalue: ID // variable
      | lvalue DOT ID // record field
//      | lvalue LBRACK exp RBRACK // array subscript
      ;

nil : NIL
    ;

function_call: ID LPAREN RPAREN
             | ID LPAREN expseq_comma RPAREN
             ;

/*
arithmetic: exp arith_op exp
          ;
        */

arithmetic: exp PLUS exp
          | exp MINUS exp
          | exp TIMES exp
          | exp DIVIDE exp
          ;

/*
arithmetic: exp 
          | arithmetic arith_op exp
          ;
        */
/*
arithmetic: arithmetic arith_op exp
          ;
        */
/*
arith_op: PLUS | MINUS | TIMES | DIVIDE
        ;
        */


/*
comparison: exp comp_op exp
          ;

comp_op: EQ | NEQ | LT | LE | GT | GE
       ;
*/

comparison: exp EQ exp
          | exp NEQ exp
          | exp LT exp
          | exp LE exp
          | exp GT exp
          | exp GE exp
          ;

record_creation: ID LBRACE record_creation_assignments RBRACE
               ;

record_creation_assignments: record_creation_assignment
                           | record_creation_assignments COMMA record_creation_assignment
                           ;

record_creation_assignment: ID EQ exp
                          ;

array_creation: ID LBRACK exp RBRACK OF exp
              ;

assignment: lvalue ASSIGN exp
          ;

if_then_else: IF comparison THEN exp ELSE exp
            ;

let: LET decs IN expseq END
   ;

// A declaration-sequence is a sequence of type, value, and function declarations; 
// no punctuation separates or terminates individual declarations.
decs: dec
    | decs dec
    ;

dec: tydec
   | vardec
   | fundec
   ;

tydec: TYPE ID EQ ty
     ;

ty: ID
  | LBRACE tyfields RBRACE
  | ARRAY OF ID  
  ;

tyfields: %empty
        | tyfield
        | tyfields COMMA tyfield
        ;

tyfield: ID COLON ID
       ;

expseq: exp
    | expseq SEMICOLON exp
    ;

expseq_comma: exp
            | expseq_comma COMMA exp
            ;

vardec: VAR ID ASSIGN exp
      | VAR ID COLON ID ASSIGN exp
      ;

fundec: FUNCTION ID LPAREN tyfields RPAREN EQ exp
      | FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp
     // | FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ stmt
      ;
